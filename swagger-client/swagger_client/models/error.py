# coding: utf-8

"""
    Python Users API

    This is a simple Users API. It provides basic logic, CRUD operations of users.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: valentin.sheboldaev@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Error(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'debug_id': 'str',
        'message': 'str',
        'information_link': 'str',
        'links': 'Links'
    }

    attribute_map = {
        'name': 'name',
        'debug_id': 'debug_id',
        'message': 'message',
        'information_link': 'information_link',
        'links': 'links'
    }

    def __init__(self, name=None, debug_id=None, message=None, information_link=None, links=None):  # noqa: E501
        """Error - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._debug_id = None
        self._message = None
        self._information_link = None
        self._links = None
        self.discriminator = None

        self.name = name
        self.debug_id = debug_id
        self.message = message
        if information_link is not None:
            self.information_link = information_link
        if links is not None:
            self.links = links

    @property
    def name(self):
        """Gets the name of this Error.  # noqa: E501

        Human readable, unique name of the error. It is recommended that this value is streamed out in error response from catalog's error_spec.json#name  # noqa: E501

        :return: The name of this Error.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Error.

        Human readable, unique name of the error. It is recommended that this value is streamed out in error response from catalog's error_spec.json#name  # noqa: E501

        :param name: The name of this Error.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def debug_id(self):
        """Gets the debug_id of this Error.  # noqa: E501

        Internal identifier used for correlation purposes  # noqa: E501

        :return: The debug_id of this Error.  # noqa: E501
        :rtype: str
        """
        return self._debug_id

    @debug_id.setter
    def debug_id(self, debug_id):
        """Sets the debug_id of this Error.

        Internal identifier used for correlation purposes  # noqa: E501

        :param debug_id: The debug_id of this Error.  # noqa: E501
        :type: str
        """
        if debug_id is None:
            raise ValueError("Invalid value for `debug_id`, must not be `None`")  # noqa: E501

        self._debug_id = debug_id

    @property
    def message(self):
        """Gets the message of this Error.  # noqa: E501

        Message describing the error. It is recommended that this value is streamed out in error response from catalog's error_spec.json#message  # noqa: E501

        :return: The message of this Error.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        Message describing the error. It is recommended that this value is streamed out in error response from catalog's error_spec.json#message  # noqa: E501

        :param message: The message of this Error.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def information_link(self):
        """Gets the information_link of this Error.  # noqa: E501

        URI for detailed information related to this error for the developer. It is recommended that this value is streamed out in error response from one of the links from catalog's error_spec.json#links  # noqa: E501

        :return: The information_link of this Error.  # noqa: E501
        :rtype: str
        """
        return self._information_link

    @information_link.setter
    def information_link(self, information_link):
        """Sets the information_link of this Error.

        URI for detailed information related to this error for the developer. It is recommended that this value is streamed out in error response from one of the links from catalog's error_spec.json#links  # noqa: E501

        :param information_link: The information_link of this Error.  # noqa: E501
        :type: str
        """

        self._information_link = information_link

    @property
    def links(self):
        """Gets the links of this Error.  # noqa: E501


        :return: The links of this Error.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Error.


        :param links: The links of this Error.  # noqa: E501
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Error, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
