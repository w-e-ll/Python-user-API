# coding: utf-8

"""
    Python Users API

    This is a simple Users API. It provides basic logic, CRUD operations of users.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: valentin.sheboldaev@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'digest': 'str',
        'company': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'email': 'str',
        'status': 'str',
        'links': 'Links'
    }

    attribute_map = {
        'uuid': 'uuid',
        'digest': 'digest',
        'company': 'company',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'email': 'email',
        'status': 'status',
        'links': 'links'
    }

    def __init__(self, uuid=None, digest=None, company=None, firstname=None, lastname=None, email=None, status=None, links=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._digest = None
        self._company = None
        self._firstname = None
        self._lastname = None
        self._email = None
        self._status = None
        self._links = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if digest is not None:
            self.digest = digest
        self.company = company
        self.firstname = firstname
        self.lastname = lastname
        self.email = email
        self.status = status
        if links is not None:
            self.links = links

    @property
    def uuid(self):
        """Gets the uuid of this User.  # noqa: E501


        :return: The uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this User.


        :param uuid: The uuid of this User.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def digest(self):
        """Gets the digest of this User.  # noqa: E501

        SHA-1 message authentication code of required fields mapping.  # noqa: E501

        :return: The digest of this User.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this User.

        SHA-1 message authentication code of required fields mapping.  # noqa: E501

        :param digest: The digest of this User.  # noqa: E501
        :type: str
        """

        self._digest = digest

    @property
    def company(self):
        """Gets the company of this User.  # noqa: E501

        User job company  # noqa: E501

        :return: The company of this User.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this User.

        User job company  # noqa: E501

        :param company: The company of this User.  # noqa: E501
        :type: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def firstname(self):
        """Gets the firstname of this User.  # noqa: E501

        User first name  # noqa: E501

        :return: The firstname of this User.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this User.

        User first name  # noqa: E501

        :param firstname: The firstname of this User.  # noqa: E501
        :type: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this User.  # noqa: E501

        User last name  # noqa: E501

        :return: The lastname of this User.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this User.

        User last name  # noqa: E501

        :param lastname: The lastname of this User.  # noqa: E501
        :type: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        User email  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        User email  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501

        User status  # noqa: E501

        :return: The status of this User.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        User status  # noqa: E501

        :param status: The status of this User.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def links(self):
        """Gets the links of this User.  # noqa: E501


        :return: The links of this User.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this User.


        :param links: The links of this User.  # noqa: E501
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
